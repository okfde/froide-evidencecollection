# Generated by Django 5.2.1 on 2025-08-28 12:25

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('froide_evidencecollection', '0014_delete_actor'),
        ('georegion', '0013_alter_georegion_region_identifier'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(unique=True, verbose_name='external ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'actor',
                'verbose_name_plural': 'actors',
            },
        ),
        migrations.CreateModel(
            name='ImportExportRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(choices=[('I', 'Import'), ('E', 'Export')], max_length=1, verbose_name='operation')),
                ('source', models.CharField(choices=[('FE', 'Froide EvidenceCollection'), ('NC', 'NocoDB')], max_length=2, verbose_name='source')),
                ('target', models.CharField(choices=[('FE', 'Froide EvidenceCollection'), ('NC', 'NocoDB')], max_length=2, verbose_name='target')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='finished at')),
                ('success', models.BooleanField(default=False, verbose_name='success')),
                ('changes', models.JSONField(blank=True, default=dict, verbose_name='changes')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
            ],
            options={
                'verbose_name': 'ðŸ”§ Import/export run',
                'verbose_name_plural': 'ðŸ”§ Import/export runs',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='external ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='synced at')),
                ('sync_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='sync UUID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'role',
                'verbose_name_plural': 'roles',
            },
        ),
        migrations.AddField(
            model_name='attachment',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created at'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='attachment',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='updated at'),
        ),
        migrations.AddField(
            model_name='evidence',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='created at'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='evidence',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='updated at'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='external_id',
            field=models.CharField(max_length=20, unique=True, verbose_name='external ID'),
        ),
        migrations.AlterField(
            model_name='evidence',
            name='reference_url',
            field=models.URLField(blank=True, max_length=500, null=True, verbose_name='reference (URL)'),
        ),
        migrations.AddField(
            model_name='evidence',
            name='originators',
            field=models.ManyToManyField(related_name='originated_evidence', to='froide_evidencecollection.actor', verbose_name='originators'),
        ),
        migrations.AddField(
            model_name='evidence',
            name='related_actors',
            field=models.ManyToManyField(related_name='related_evidence', to='froide_evidencecollection.actor', verbose_name='related actors'),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='external ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='synced at')),
                ('sync_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='sync UUID')),
                ('also_known_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None, verbose_name='also known as')),
                ('wikidata_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Wikidata ID')),
                ('organization_name', models.CharField(max_length=255, verbose_name='organization name')),
                ('special_regions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None, verbose_name='special regions')),
                ('institutional_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='froide_evidencecollection.institutionallevel', verbose_name='institutional level')),
                ('regions', models.ManyToManyField(blank=True, to='georegion.georegion', verbose_name='regions')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='froide_evidencecollection.organizationstatus')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
            },
        ),
        migrations.AddField(
            model_name='actor',
            name='organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor', to='froide_evidencecollection.organization', verbose_name='organization'),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='external ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='synced at')),
                ('sync_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='sync UUID')),
                ('also_known_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None, verbose_name='also known as')),
                ('wikidata_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Wikidata ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(max_length=50, verbose_name='last name')),
                ('title', models.CharField(blank=True, max_length=20, null=True, verbose_name='title')),
                ('aw_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='abgeordnetenwatch.de ID')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='froide_evidencecollection.personstatus')),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'persons',
            },
        ),
        migrations.AddField(
            model_name='actor',
            name='person',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor', to='froide_evidencecollection.person', verbose_name='person'),
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='external ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('synced_at', models.DateTimeField(blank=True, null=True, verbose_name='synced at')),
                ('sync_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='sync UUID')),
                ('aw_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='abgeordnetenwatch.de ID')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('start_date_string', models.CharField(blank=True, max_length=10, null=True, verbose_name='start date (string)')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('end_date_string', models.CharField(blank=True, max_length=10, null=True, verbose_name='end date (string)')),
                ('reference_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='reference URL')),
                ('comment', models.TextField(blank=True, default='', verbose_name='comment')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to='froide_evidencecollection.organization', verbose_name='organization')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to='froide_evidencecollection.person', verbose_name='person')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='froide_evidencecollection.role', verbose_name='role')),
            ],
            options={
                'verbose_name': 'affiliation',
                'verbose_name_plural': 'affiliations',
            },
        ),
        migrations.AddConstraint(
            model_name='actor',
            constraint=models.CheckConstraint(condition=models.Q(('person__isnull', False), ('organization__isnull', False), _connector='OR'), name='actor_person_or_organization_required'),
        ),
        migrations.AddConstraint(
            model_name='actor',
            constraint=models.UniqueConstraint(condition=models.Q(('person__isnull', False)), fields=('person',), name='unique_actor_person'),
        ),
        migrations.AddConstraint(
            model_name='actor',
            constraint=models.UniqueConstraint(condition=models.Q(('organization__isnull', False)), fields=('organization',), name='unique_actor_organization'),
        ),
    ]
